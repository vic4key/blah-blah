--- Notes

HEAD~3 có nghĩa là commit thứ 3 tính từ HEAD xuống (started at 1 = HEAD)



--- Clean-up
$ git clean -df // force removal of untracked files & directories
$ git clean -dfx // force removal of untracked files & directories & ignored files



--- Create patch & apply

* Hiện tại log như thế này

$ git log --oneline
  commit-4 (HEAD -> test, origin/test) 4
  commit-3 3
  commit-2 2
  commit-1 1
  commit-0 0 // code cũ

* Trong đó:
  - commit-0 là code cũ
  - các commit mới là 1->4

* Bây giờ, muốn tạo patch và merge commit 1-4 sang nhánh khác thì làm như sau:
  Chú ý khi chọn range commit khi tạo file patch:
    - Thứ tự commit phải chọn từ dưới lên
    - Commit đầu  là commit trước khi thay đổi (có nghĩa là lấy commit của code cũ)
    - Commit cuối là commit đến phần thay đổi muốn lấy

1. Tạo file patch tại nhánh hiện tại
$ git diff commit-0..commit-4 > 0-4.patch

2. Sang nhánh khác và apply file patch
$ git clean -df                         // clean sạch sẽ (cẩn thận bước này - sẽ xóa hết các changes hiện tại)
$ git apply path/to/0-4.patch --stat    // xem thống kê qua các thay đổi
$ git apply path/to/0-4.patch --check   // test xem có lỗi ko
$ git apply path/to/0-4.patch           // thực hiện apply các thay đổi

3. Cuối cùng là review changes sau đó `git add *` & commit lên nhánh mới là xong



--- Delete a specified commit on remote

* Hiện tại log như thế này

$ git log --oneline
  commit-5 (HEAD -> test, origin/test) 5  // đây là commit muốn xóa
  commit-4 4
  commit-3 3
  commit-2 2
  commit-1 1
  commit-0 0

* Bây giờ, muốn xóa commit-5 thì làm như sau:

$ git reset --hard commit-4   // reset về commit ngay trước commit-5 (là commit-4)
<xem lại log, đảm bảo đúng expect>

$ git push -f                 // force push

$ git log --oneline           // check lại log đảm bảo đã xóa commit-5
  commit-4 (HEAD -> test, origin/test) 4
  commit-3 3
  commit-2 2
  commit-1 1
  commit-0 0



--- Edit a commit message (HEAD)

Chú ý: Commit hash của HEAD sẽ bị thay đổi

* Hiện tại log như thế này

$ git log --oneline
  commit-5 (HEAD -> test, origin/test) oh-no  // đây là commit muốn sửa
  commit-4 4
  commit-3 3
  commit-2 2
  commit-1 1
  commit-0 0

$ git commit --amend
<git auto mở file 'COMMIT_EDITMSG' trong editor, tìm đúng commit, sửa message 'oh-no' thành '5', save file>
<xem lại log, đảm bảo đúng expect>

$ git push -f

$ git log --oneline
  commit-5 (HEAD -> test, origin/test) 5  // check lại log đảm bảo commit message đã được sửa
  commit-4 4
  commit-3 3
  commit-2 2
  commit-1 1
  commit-0 0



--- Edit a commit message (a specified commit)

Chú ý: Commit hash của các commit từ specified commit đến HEAD sẽ bị thay đổi

* Hiện tại log như thế này

$ git log --oneline
  commit-5 (HEAD -> test, origin/test) oh-no
  commit-4 4
  commit-3 oh-no  // đây là commit muốn sửa
  commit-2 2
  commit-1 1
  commit-0 0

$ git rebase -i HEAD~3
<git auto mở file 'git-rebase-todo' trong editor, tìm đúng commit, sửa type 'pick' thành 'reword', save file>
<git auto mở file 'COMMIT_EDITMSG' trong editor, tìm đúng commit, sửa message 'oh-no' thành '3', save file>
<xem lại log, đảm bảo đúng expect>

$ git push -f

$ git log --oneline  // check lại log đảm bảo commit message đã được sửa
  commit-5 (HEAD -> test, origin/test) 5
  commit-4 4
  commit-3 3
  commit-2 2
  commit-1 1
  commit-0 0



--- Lỡ push commit (case: chưa push lên remote) nhưng chưa pull code latest trước khi push, và bị tạo thêm 1 commit merged

$ git pull --rebase

<xem lại log, đảm bảo đúng expect>

$ git push -f



--- Lỡ push commit (case: đã push lên remote) nhưng chưa pull code latest trước khi push, và bị tạo thêm 1 commit merged

* Hiện tại log như thế này

$ git log --oneline -n 5
commit-4 (HEAD -> test_squash-and-merge-5) Merge branch ...
commit-3 Update okok.txt
commit-2 (origin/test_squash-and-merge-5) Merge branch ...
commit-1 ohno // muốn merge các commit từ HEAD xuống commit này
commit-0 test

* Bây giờ, muốn xóa gộp 4 commit (commit-4, commit-3, commit-2, commit-1) thành 1 commit thì làm như sau:

$ git rebase -i commit-0 // commit origin
<git auto mở trình soạn thảo với danh sách các commit từ commit-1 trở lên:
```
pick commit-1 ohno
pick commit-2 (origin/test_squash-and-merge-5) Merge branch ...
pick commit-3 Update okok.txt
pick commit-4 (HEAD -> test_squash-and-merge-5) Merge branch ...
```
<sửa thành>
```
pick commit-1 ohno (merged)
squash commit-2 (origin/test_squash-and-merge-5) Merge branch ...
squash commit-3 Update okok.txt
squash commit-4 (HEAD -> test_squash-and-merge-5) Merge branch ...
```
<sau đó lưu lại>
<git auto mở trình soạn thảo để sửa log, xóa các commit message và chỉ giữ lại 1 commit message>
<sau đó lưu lại>
<xem lại log, đảm bảo đúng expect>

$ git push -f

$ git log --oneline -n 5
9e44cfe (HEAD -> test_squash-and-merge-5, origin/test_squash-and-merge-5) ohno (merged)
commit-0 test



--- Xem & Tạo file path thay đổi chỉ giữa 2 commits (ko bao gồm các commit trung gian)

$ git diff <commit1> <commit2> # all files
$ git diff <commit1> <commit2> -- <file_path> # one file
$ git diff <commit1> <commit2> -- <file_1 file_2> # multiple files

$ git diff 19016ec 6ffc717 -- main.py > main.py.patch # lưu ra file patch



--- Tạo file path thay đổi trong một khoảng 2 commits (bao gồm các commit trung gian, auto tạo mỗi file tương ứng với một commit)

$ git format-patch 19016ec..6ffc717
$ git format-patch 19016ec..6ffc717 -- main.py # một file cụ thể



--- Pull Request Options

*Squash and merge:
- Merge 10 commit thành 1 commit duy nhất (code final => code logic không bị thay đổi).
- Chỉ tạo ra 1 commit vào base branch (A-B-C + C-D-E => A-B-C-DE').
- Mất lịch sử chi tiết (mất 10 commit message).

Git lấy tất cả các thay đổi (diffs) từ toàn bộ 10 commit trong branch của bạn và gộp chúng thành một commit duy nhất.
Thứ tự các commit không được giữ lại theo cách từng bước, mà chỉ nội dung code thay đổi cuối cùng được tổng hợp.

*Rebase and merge:
- Patch lần lượt 10 commit vào base branch (A-B-C + C-D-E => A-B-C-D'-E').
- Tạo ra đủ 10 commit giống bên branch được merge (giữ nguyên 10 commit message & không tạo ra commit hợp nhất).
- Tạo lịch sử tuyến tính.

Git sẽ lấy từng commit từ branch của bạn (ví dụ: 10 commit) và patch chúng lần lượt lên trên lịch sử của base branch.
Quá trình này giống như "đặt lại" (rebase/patch) các commit của bạn lên đầu base branch, giữ nguyên nội dung thay đổi của từng commit.



--- Issues

- Issue: You are not currently on a branch.

Mô tả lỗi:
  ```
  $ git pull
  You are not currently on a branch.
  Please specify which branch you want to merge with.
  See git-pull(1) for details.
      git pull <remote> <branch>
  ```

Solution:
  Dùng lệnh git checkout lại chính branch đó



--- Links
https://initialcommit.com/blog/git-reflog
https://viblo.asia/p/git-va-nhung-thuat-ngu-co-ban-L4x5xRABZBM
https://viblo.asia/p/git-reflog-phao-cuu-sinh-cho-nhung-loi-lam-hay-gap-tren-git-x7Z4Dja2LnX
